name: Build and Test
on:
  push:
    branches:
      - main

env:
  GOLANG_VERSION: '1.18'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-go:
    name: Ensure Go modules syncrhonicity
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}
          cache: true
      - name: Download all Go modules
        run: |
          go mod download
      - name: Check for tidyness of go.mod and go.sum
        run: |
          go mod tidy
          git diff --exit-code -- .
      - name: Verify Go modules
        run: |
          go mod verify

  build-go:
    name: Build Go code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}
          cache: true
      - name: Download all Go modules
        run: |
          go mod download
      - name: Compile all packages
        run: |
          go build -v $(go list ./... | grep -v /vendor/ | tr '\n' ' ')

  lint-go:
    name: Lint Go code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}
          cache: true
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.46.2
          args: --timeout 10m --verbose

  test-go:
    name: Test Go code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}
          cache: true
      - name: Run Go Tests
        run: |
          go test -short -race -coverprofile coverage.txt -covermode atomic $(go list ./... | grep -v /vendor/ | tr '\n' ' ')
          go tool cover -func=coverage.txt
      - name: Upload code coverage information to codecov.io
        uses: codecov/codecov-action@v2
        with:
          files: coverage.txt
